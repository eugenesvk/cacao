#[cfg(test)] #[rustfmt::skip]
mod event_test {
    use crate::appkit::EventModifierBitFlag;
    #[test]
    fn test_event_modifier_bit_flag_display() {
        assert_eq!("‚Äπ‚áß"           ,format!("{}"  ,EventModifierBitFlag::LeftShift  ));
        assert_eq!("‚Äπ‚áß‚Ä∫"          ,format!("{}"  ,EventModifierBitFlag::Shift      ));
        assert_eq!("‚áß‚Ä∫"           ,format!("{}"  ,EventModifierBitFlag::RightShift ));
        assert_eq!("‚Äπ‚áß‚Äπ‚åÉ‚Äπ‚å•‚Äπ‚åò"    ,format!("{}"  ,EventModifierBitFlag::LeftModi   ));
        assert_eq!("‚áß‚Ä∫‚åÉ‚Ä∫‚å•‚Ä∫‚åò‚Ä∫"    ,format!("{}"  ,EventModifierBitFlag::RightModi  ));
        assert_eq!("‚Äπ‚áß‚Ä∫‚Äπ‚åÉ‚Ä∫‚Äπ‚å•‚Ä∫‚Äπ‚åò‚Ä∫",format!("{}"  ,EventModifierBitFlag::LRModi     ));
        assert_eq!("üåê"           ,format!("{:#}",EventModifierBitFlag::Function   )); // when it's a modifier key
        assert_eq!("∆í"            ,format!("{}"  ,EventModifierBitFlag::Function   ));
        assert_eq!("‚á≠"            ,format!("{:#}",EventModifierBitFlag::Numpad     )); // when it's a modifier key
        assert_eq!("üî¢"           ,format!("{}"  ,EventModifierBitFlag::Numpad     ));
        assert_eq!("‚Ñπ"           ,format!("{}"  ,EventModifierBitFlag::Help       ));
        assert_eq!("!üñÆ"           ,format!("{}"  ,EventModifierBitFlag::DeviceIndependentFlagsMask));
        // Shift ignored, only flagmask remains
        assert_eq!("!üñÆ"           ,format!("{}"  ,EventModifierBitFlag::DeviceIndependentFlagsMask | EventModifierBitFlag::RightShift));
    }
}
